// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using PetService_Project_Api.Models;

namespace PetService_Project.Models;

public partial class dbPetService_ProjectContext : IdentityDbContext<ApplicationUser>
{
    public dbPetService_ProjectContext()
    {
    }

    public dbPetService_ProjectContext(DbContextOptions<dbPetService_ProjectContext> options)
        : base(options)
    {
    }

    public virtual DbSet<TChatMessage> TChatMessages { get; set; }

    public virtual DbSet<TChatSession> TChatSessions { get; set; }

    public virtual DbSet<TDistrict> TDistricts { get; set; }

    public virtual DbSet<TEmployee> TEmployees { get; set; }

    public virtual DbSet<TEmployeePhoto> TEmployeePhotos { get; set; }

    public virtual DbSet<TEmployeeService> TEmployeeServices { get; set; }

    public virtual DbSet<TFaq> TFaqs { get; set; }

    public virtual DbSet<THotel> THotels { get; set; }

    public virtual DbSet<THotelItem> THotelItems { get; set; }

    public virtual DbSet<THotelReview> THotelReviews { get; set; }

    public virtual DbSet<TMember> TMembers { get; set; }

    public virtual DbSet<TMemberSource> TMemberSources { get; set; }

    public virtual DbSet<TNews> TNews { get; set; }

    public virtual DbSet<TNewsFile> TNewsFiles { get; set; }

    public virtual DbSet<TOrder> TOrders { get; set; }

    public virtual DbSet<TOrderHotelDetail> TOrderHotelDetails { get; set; }

    public virtual DbSet<TOrderWalkDetail> TOrderWalkDetails { get; set; }

    public virtual DbSet<TPetList> TPetLists { get; set; }

    public virtual DbSet<TPriceFluctuation> TPriceFluctuations { get; set; }

    public virtual DbSet<TQtyStatus> TQtyStatuses { get; set; }

    public virtual DbSet<TRoomType> TRoomTypes { get; set; }

    public virtual DbSet<TRoomsDetail> TRoomsDetails { get; set; }

    public virtual DbSet<TSourceList> TSourceLists { get; set; }

    public virtual DbSet<TWalkReview> TWalkReviews { get; set; }


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        modelBuilder.Entity<TChatMessage>(entity =>
        {
            entity.HasKey(e => e.FMessageId).HasName("PK__tChatMes__CB84189CEBDFDF3D");

            entity.ToTable("tChatMessage");

            entity.Property(e => e.FMessageId).HasColumnName("fMessage_id");
            entity.Property(e => e.FAttachmentUrl)
                .HasMaxLength(500)
                .HasColumnName("fAttachmentUrl");
            entity.Property(e => e.FDeletedAt)
                .HasColumnType("datetime")
                .HasColumnName("fDeletedAt");
            entity.Property(e => e.FIsDeleted).HasColumnName("fIsDeleted");
            entity.Property(e => e.FIsRead).HasColumnName("fIsRead");
            entity.Property(e => e.FMessageText).HasColumnName("fMessageText");
            entity.Property(e => e.FMessageType)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fMessageType");
            entity.Property(e => e.FSendTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fSendTime");
            entity.Property(e => e.FSenderId).HasColumnName("fSender_id");
            entity.Property(e => e.FSenderRole)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fSenderRole");
            entity.Property(e => e.FSessionId).HasColumnName("fSession_id");

            entity.HasOne(d => d.FSession).WithMany(p => p.TChatMessages)
                .HasForeignKey(d => d.FSessionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tChatMessage_tChatSession");
        });

        modelBuilder.Entity<TChatSession>(entity =>
        {
            entity.HasKey(e => e.FSessionId).HasName("PK__tChatSes__6C5424881F991C5F");

            entity.ToTable("tChatSession");

            entity.Property(e => e.FSessionId).HasColumnName("fSession_id");
            entity.Property(e => e.FEmployeeId).HasColumnName("fEmployee_id");
            entity.Property(e => e.FEndTime)
                .HasColumnType("datetime")
                .HasColumnName("fEndTime");
            entity.Property(e => e.FLastMessageTime)
                .HasColumnType("datetime")
                .HasColumnName("fLastMessageTime");
            entity.Property(e => e.FMemberId).HasColumnName("fMember_id");
            entity.Property(e => e.FStartTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fStartTime");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("進行中");

            entity.HasOne(d => d.FEmployee).WithMany(p => p.TChatSessions)
                .HasForeignKey(d => d.FEmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tChatSession_tEmployee");

            entity.HasOne(d => d.FMember).WithMany(p => p.TChatSessions)
                .HasForeignKey(d => d.FMemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tChatSession_tMember");
        });

        modelBuilder.Entity<TDistrict>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK__tDistric__D9F8227C06F2C2D0");

            entity.ToTable("tDistrict");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FDistrictName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fDistrictName");
            entity.Property(e => e.FIsDelete).HasColumnName("fIs_Delete");
        });

        modelBuilder.Entity<TEmployee>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK_tStaff_Manage");

            entity.ToTable("tEmployee");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FAccount)
                .HasMaxLength(50)
                .HasColumnName("fAccount");
            entity.Property(e => e.FAddress)
                .HasMaxLength(50)
                .HasColumnName("fAddress");
            entity.Property(e => e.FBirth)
                .HasColumnType("date")
                .HasColumnName("fBirth");
            entity.Property(e => e.FCreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("fCreated_at");
            entity.Property(e => e.FEmail)
                .HasMaxLength(50)
                .HasColumnName("fEmail");
            entity.Property(e => e.FGender)
                .HasMaxLength(10)
                .HasColumnName("fGender");
            entity.Property(e => e.FImage)
                .HasMaxLength(500)
                .HasColumnName("fImage");
            entity.Property(e => e.FName)
                .HasMaxLength(50)
                .HasColumnName("fName");
            entity.Property(e => e.FPassword)
                .HasMaxLength(50)
                .HasColumnName("fPassword");
            entity.Property(e => e.FPhone)
                .HasMaxLength(50)
                .HasColumnName("fPhone");
            entity.Property(e => e.FPosition).HasColumnName("fPosition");
        });

        modelBuilder.Entity<TEmployeePhoto>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK__tEmploye__D9F8227C4D4139AD");

            entity.ToTable("tEmployee_Photo");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FEmployeeId).HasColumnName("fEmployeeId");
            entity.Property(e => e.FImagepath)
                .HasMaxLength(200)
                .HasColumnName("fImagepath");

            entity.HasOne(d => d.FEmployee).WithMany(p => p.TEmployeePhotos)
                .HasForeignKey(d => d.FEmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tEmployee_Photo_tEmployee");
        });

        modelBuilder.Entity<TEmployeeService>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK__tEmploye__D9F8227CC02F0E41");

            entity.ToTable("tEmployee_Service");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FAcceptPetType).HasColumnName("fAcceptPetType");
            entity.Property(e => e.FDescription)
                .HasMaxLength(500)
                .HasColumnName("fDescription");
            entity.Property(e => e.FDescriptionShort)
                .HasMaxLength(200)
                .HasColumnName("fDescriptionShort");
            entity.Property(e => e.FDistance).HasColumnName("fDistance");
            entity.Property(e => e.FDistrictId).HasColumnName("fDistrictId");
            entity.Property(e => e.FEmployeeId).HasColumnName("fEmployeeId");
            entity.Property(e => e.FIsDelete).HasColumnName("fIs_Delete");
            entity.Property(e => e.FLatitude)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("fLatitude");
            entity.Property(e => e.FLongitude)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("fLongitude");
            entity.Property(e => e.FPetSize).HasColumnName("fPetSize");
            entity.Property(e => e.FPrice)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fPrice");

            entity.HasOne(d => d.FDistrict).WithMany(p => p.TEmployeeServices)
                .HasForeignKey(d => d.FDistrictId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__tEmployee__fDist__412EB0B6");

            entity.HasOne(d => d.FEmployee).WithMany(p => p.TEmployeeServices)
                .HasForeignKey(d => d.FEmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tEmployee_Service_tEmployee");
        });

        modelBuilder.Entity<TFaq>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK__FAQ__D9F8227C5CF74266");

            entity.ToTable("tFAQ");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FAnswer).HasColumnName("fAnswer");
            entity.Property(e => e.FCategory)
                .HasMaxLength(100)
                .HasColumnName("fCategory");
            entity.Property(e => e.FCreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("date")
                .HasColumnName("fCreate_Date");
            entity.Property(e => e.FIsActive)
                .HasDefaultValue(true)
                .HasColumnName("fIs_Active");
            entity.Property(e => e.FQuestion)
                .HasMaxLength(500)
                .HasColumnName("fQuestion");
            entity.Property(e => e.FSortOrder)
                .HasDefaultValue(0)
                .HasColumnName("fSort_Order");
        });

        modelBuilder.Entity<THotel>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK__tHotels__D9F8227C9F403BD1");

            entity.ToTable("tHotels");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FAddress)
                .HasMaxLength(100)
                .HasColumnName("fAddress");
            entity.Property(e => e.FEmail)
                .HasMaxLength(50)
                .HasColumnName("fEmail");
            entity.Property(e => e.FImage1)
                .HasMaxLength(100)
                .HasColumnName("fImage_1");
            entity.Property(e => e.FImage2)
                .HasMaxLength(100)
                .HasColumnName("fImage_2");
            entity.Property(e => e.FImage3)
                .HasMaxLength(100)
                .HasColumnName("fImage_3");
            entity.Property(e => e.FIsDelete).HasColumnName("fIs_delete");
            entity.Property(e => e.FLatitude)
                .HasColumnType("decimal(10, 7)")
                .HasColumnName("fLatitude");
            entity.Property(e => e.FLongitude)
                .HasColumnType("decimal(10, 7)")
                .HasColumnName("fLongitude");
            entity.Property(e => e.FName)
                .HasMaxLength(50)
                .HasColumnName("fName");
            entity.Property(e => e.FPhone)
                .HasMaxLength(50)
                .HasColumnName("fPhone");
            entity.Property(e => e.FRating)
                .HasDefaultValue((byte)0)
                .HasColumnName("fRating");
        });

        modelBuilder.Entity<THotelItem>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK__tHotel_I__D9F8227C564B3BC3");

            entity.ToTable("tHotel_Items");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FDescription)
                .HasMaxLength(200)
                .HasColumnName("fDescription");
            entity.Property(e => e.FHotelId).HasColumnName("fHotel_id");
            entity.Property(e => e.FIsDelete).HasColumnName("fIs_delete");
            entity.Property(e => e.FName)
                .HasMaxLength(50)
                .HasColumnName("fName");
            entity.Property(e => e.FType).HasColumnName("fType");

            entity.HasOne(d => d.FHotel).WithMany(p => p.THotelItems)
                .HasForeignKey(d => d.FHotelId)
                .HasConstraintName("FK_HotelItems_Hotels");
        });

        modelBuilder.Entity<THotelReview>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK__tHotel_R__D9F8227C36AD9A13");

            entity.ToTable("tHotel_Reviews");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FContent).HasColumnName("fContent");
            entity.Property(e => e.FCreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("fCreated_at");
            entity.Property(e => e.FHotelId).HasColumnName("fHotel_id");
            entity.Property(e => e.FIsDelete).HasColumnName("fIs_delete");
            entity.Property(e => e.FMemberId).HasColumnName("fMember_id");
            entity.Property(e => e.FOrderId).HasColumnName("fOrder_id");
            entity.Property(e => e.FRating).HasColumnName("fRating");
            entity.Property(e => e.FRoomtypeId).HasColumnName("fRoomtype_id");
            entity.Property(e => e.FUpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("fUpdated_at");

            entity.HasOne(d => d.FHotel).WithMany(p => p.THotelReviews)
                .HasForeignKey(d => d.FHotelId)
                .HasConstraintName("FK_tHotel_Reviews_Hotels");

            entity.HasOne(d => d.FMember).WithMany(p => p.THotelReviews)
                .HasForeignKey(d => d.FMemberId)
                .HasConstraintName("FK_tHotel_Reviews_tMember");

            entity.HasOne(d => d.FOrder).WithMany(p => p.THotelReviews)
                .HasForeignKey(d => d.FOrderId)
                .HasConstraintName("FK_tHotel_Reviews_tOrders");

            entity.HasOne(d => d.FRoomtype).WithMany(p => p.THotelReviews)
                .HasForeignKey(d => d.FRoomtypeId)
                .HasConstraintName("FK_tHotel_Reviews_RoomTypes");
        });

        modelBuilder.Entity<TMember>(entity =>
        {
            entity.HasKey(e => e.FId);

            entity.ToTable("tMember");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FAddress)
                .HasMaxLength(50)
                .HasColumnName("fAddress");
            entity.Property(e => e.FAspNetUserId)
                .HasMaxLength(450)
                .HasColumnName("fAspNetUserId");
            entity.Property(e => e.FBlackList).HasColumnName("fBlack_list");
            entity.Property(e => e.FCreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("fCreated_date");
            entity.Property(e => e.FEmail)
                .HasMaxLength(50)
                .HasColumnName("fEmail");
            entity.Property(e => e.FEmailVerfifcation).HasColumnName("fEmail_verfifcation");
            entity.Property(e => e.FGoogleAvatarUrl)
                .HasMaxLength(200)
                .HasColumnName("fGoogleAvatarUrl");
            entity.Property(e => e.FImage)
                .HasMaxLength(200)
                .HasColumnName("fImage");
            entity.Property(e => e.FInfo)
                .HasMaxLength(50)
                .HasColumnName("fInfo");
            entity.Property(e => e.FIsDeleted).HasColumnName("fIsDeleted");
            entity.Property(e => e.FLastLoginDate)
                .HasColumnType("datetime")
                .HasColumnName("fLastLoginDate");
            entity.Property(e => e.FLoginProvider)
                .HasMaxLength(20)
                .HasColumnName("fLoginProvider");
            entity.Property(e => e.FName)
                .HasMaxLength(50)
                .HasColumnName("fName");
            entity.Property(e => e.FPassword)
                .HasMaxLength(50)
                .HasColumnName("fPassword");
            entity.Property(e => e.FPhone)
                .HasMaxLength(10)
                .HasColumnName("fPhone");
            entity.Property(e => e.FProviderKey)
                .HasMaxLength(100)
                .HasColumnName("fProviderKey");
        });

        modelBuilder.Entity<TMemberSource>(entity =>
        {
            entity.ToTable("tMemberSource");
            // ... 複合主鍵配置 ...
            entity.HasKey(e => new { e.FMemberId, e.FSourceId })
                  .HasName("PK_tMemberSource");

            entity.HasOne(d => d.FMember)
                  .WithMany(p => p.TMemberSources) // <--- 指向 tMember 中的集合
                .HasForeignKey(d => d.FMemberId)
                  .OnDelete(DeleteBehavior.Cascade) // 與資料庫中的 ON DELETE CASCADE 匹配
                .HasConstraintName("fk_tMemberSource_fMemberId");


            entity.HasOne(d => d.FSource)
                  .WithMany(p => p.TMemberSources) // <--- 指向 tSourceList 中的集合
                .HasForeignKey(d => d.FSourceId)
                  // .OnDelete(DeleteBehavior.ClientSetNull) // 如果資料庫沒有設定 ON DELETE CASCADE
                .HasConstraintName("fk_tMemberSource_fSourceId");
        });

        modelBuilder.Entity<TNews>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK__tNews__D9F8227C67DA9D72");

            entity.ToTable("tNews");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FCategory)
                .HasMaxLength(50)
                .HasColumnName("fCategory");
            entity.Property(e => e.FContent).HasColumnName("fContent");
            entity.Property(e => e.FCreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("date")
                .HasColumnName("fCreate_Date");
            entity.Property(e => e.FEndDate)
                .HasColumnType("date")
                .HasColumnName("fEnd_Date");
            entity.Property(e => e.FImagePath)
                .HasMaxLength(500)
                .HasColumnName("fImage_Path");
            entity.Property(e => e.FIsActive)
                .HasDefaultValue(true)
                .HasColumnName("fIs_Active");
            entity.Property(e => e.FIsPinned)
                .HasDefaultValue(false)
                .HasColumnName("fIs_Pinned");
            entity.Property(e => e.FStartDate)
                .HasColumnType("date")
                .HasColumnName("fStart_Date");
            entity.Property(e => e.FTitle)
                .HasMaxLength(200)
                .HasColumnName("fTitle");
        });

        modelBuilder.Entity<TNewsFile>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK__NewsFile__D9F8227CA931B71B");

            entity.ToTable("tNewsFiles");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FFileName)
                .HasMaxLength(200)
                .HasColumnName("fFile_Name");
            entity.Property(e => e.FFilePath)
                .HasMaxLength(500)
                .HasColumnName("fFile_Path");
            entity.Property(e => e.FNewsId).HasColumnName("fNews_Id");
            entity.Property(e => e.FUploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("date")
                .HasColumnName("fUpload_Date");

            entity.HasOne(d => d.FNews).WithMany(p => p.TNewsFiles)
                .HasForeignKey(d => d.FNewsId)
                .HasConstraintName("FK_NewFiles_News");
        });

        modelBuilder.Entity<TOrder>(entity =>
        {
            entity.HasKey(e => e.FId);

            entity.ToTable("tOrders");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FCreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("fCreated_at");
            entity.Property(e => e.FIsDelete).HasColumnName("fIs_delete");
            entity.Property(e => e.FMemberId).HasColumnName("fMemberId");
            entity.Property(e => e.FOrderStatus)
                .HasMaxLength(50)
                .HasColumnName("fOrderStatus");
            entity.Property(e => e.FOrderType)
                .HasMaxLength(50)
                .HasColumnName("fOrderType");
            entity.Property(e => e.FTotalAmount)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fTotalAmount");
            entity.Property(e => e.FUpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("fUpdated_at");
            entity.Property(e => e.FpaymentTime)
                .HasColumnType("datetime")
                .HasColumnName("FPaymentTime");
            entity.Property(e => e.FmerchantTradeNo)
                .HasMaxLength(50)
                .HasColumnName("FMerchantTradeNo");
        });

        modelBuilder.Entity<TOrderHotelDetail>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK__tOrder_H__D9F8227C2BD13B65");

            entity.ToTable("tOrder_Hotel_Detail");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FAdditionlMessage)
                .HasMaxLength(100)
                .HasColumnName("fAdditionlMessage");
            entity.Property(e => e.FCheckIn)
                .HasColumnType("datetime")
                .HasColumnName("fCheckIn");
            entity.Property(e => e.FCheckOut)
                .HasColumnType("datetime")
                .HasColumnName("fCheckOut");
            entity.Property(e => e.FHotelId).HasColumnName("fHotelId");
            entity.Property(e => e.FOrderId).HasColumnName("fOrderId");
            entity.Property(e => e.FPricePerRoom)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fPricePerRoom");
            entity.Property(e => e.FRoomDetailId).HasColumnName("fRoomDetailId");
            entity.Property(e => e.FRoomQty)
                .HasDefaultValue(1)
                .HasColumnName("fRoomQty");
            entity.Property(e => e.FTotalPrice)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fTotalPrice");

            entity.HasOne(d => d.FHotel).WithMany(p => p.TOrderHotelDetails)
                .HasForeignKey(d => d.FHotelId)
                .HasConstraintName("FK_OrderHotel_Hotel");

            entity.HasOne(d => d.FOrder).WithMany(p => p.TOrderHotelDetails)
                .HasForeignKey(d => d.FOrderId)
                .HasConstraintName("FK_tOrder_Hotel_Detail_tOrders");

            entity.HasOne(d => d.FRoomDetail).WithMany(p => p.TOrderHotelDetails)
                .HasForeignKey(d => d.FRoomDetailId)
                .HasConstraintName("FK_OrderHotel_RoomDetail");
        });

        modelBuilder.Entity<TOrderWalkDetail>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK__tOrder_W__D9F8227C74BA78DA");

            entity.ToTable("tOrder_Walk_Detail");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FAdditionlＭessage)
                .HasMaxLength(100)
                .HasColumnName("fAdditionlＭessage");
            entity.Property(e => e.FAmount).HasColumnName("fAmount");
            entity.Property(e => e.FEmployeeServiceId).HasColumnName("fEmployeeServiceId");
            entity.Property(e => e.FOrderId).HasColumnName("fOrderId");
            entity.Property(e => e.FServicePrice)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fServicePrice");
            entity.Property(e => e.FTotalPrice)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fTotalPrice");
            entity.Property(e => e.FWalkEnd)
                .HasColumnType("datetime")
                .HasColumnName("fWalkEnd");
            entity.Property(e => e.FWalkStart)
                .HasColumnType("datetime")
                .HasColumnName("fWalkStart");

            entity.HasOne(d => d.FEmployeeService).WithMany(p => p.TOrderWalkDetails)
                .HasForeignKey(d => d.FEmployeeServiceId)
                .HasConstraintName("FK_OrderWalk_Service");

            entity.HasOne(d => d.FOrder).WithMany(p => p.TOrderWalkDetails)
                .HasForeignKey(d => d.FOrderId)
                .HasConstraintName("FK_tOrder_Walk_Detail_tOrders");
        });

        modelBuilder.Entity<TPetList>(entity =>
        {
            entity.HasKey(e => e.FId);

            entity.ToTable("tPetList");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FMemberId).HasColumnName("fMemberId");
            entity.Property(e => e.FPetAge).HasColumnName("fPetAge");
            entity.Property(e => e.FPetBirthday)
                .HasColumnType("date")
                .HasColumnName("fPetBirthday");
            entity.Property(e => e.FPetBlackList).HasColumnName("fPetBlackList");
            entity.Property(e => e.FPetChildFriendly).HasColumnName("fPetChildFriendly");
            entity.Property(e => e.FPetDe).HasColumnName("fPetDe");
            entity.Property(e => e.FPetImagePath)
                .HasMaxLength(200)
                .HasColumnName("fPetImagePath");
            entity.Property(e => e.FPetMemo)
                .HasMaxLength(50)
                .HasColumnName("fPetMemo");
            entity.Property(e => e.FPetName)
                .HasMaxLength(50)
                .HasColumnName("fPetName");
            entity.Property(e => e.FPetPetFriendly).HasColumnName("fPetPetFriendly");
            entity.Property(e => e.FPetTrained).HasColumnName("fPetTrained");
            entity.Property(e => e.FPetWeight).HasColumnName("fPetWeight");

            entity.HasOne(d => d.FMember).WithMany(p => p.TPetLists)
                .HasForeignKey(d => d.FMemberId)
                .HasConstraintName("fk_tPetList_fMemberId");
        });

        modelBuilder.Entity<TPriceFluctuation>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK__tPrice_F__D9F8227CF3786956");

            entity.ToTable("tPrice_Fluctuation");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FMonth).HasColumnName("fMonth");
            entity.Property(e => e.FMultiplier)
                .HasColumnType("decimal(3, 2)")
                .HasColumnName("fMultiplier");
        });

        modelBuilder.Entity<TQtyStatus>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK__tQty_Sta__D9F8227C4DAF927C");

            entity.ToTable("tQty_Status");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FBigDogRoom).HasColumnName("fBig_dog_room");
            entity.Property(e => e.FCatRoom).HasColumnName("fCat_room");
            entity.Property(e => e.FDate)
                .HasColumnType("date")
                .HasColumnName("fDate");
            entity.Property(e => e.FHotelId).HasColumnName("fHotel_id");
            entity.Property(e => e.FMiddleDogRoom).HasColumnName("fMiddle_dog_room");
            entity.Property(e => e.FSmallDogRoom).HasColumnName("fSmall_dog_room");

            entity.HasOne(d => d.FHotel).WithMany(p => p.TQtyStatuses)
                .HasForeignKey(d => d.FHotelId)
                .HasConstraintName("FK_QtyStatus_Hotels");
        });

        modelBuilder.Entity<TRoomType>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK__tRoom_ty__D9F8227CB8488A7C");

            entity.ToTable("tRoom_types");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fName");
        });

        modelBuilder.Entity<TRoomsDetail>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK__tRooms_D__D9F8227C2AF05BC7");

            entity.ToTable("tRooms_Detail");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FHotelId).HasColumnName("fHotel_id");
            entity.Property(e => e.FImage)
                .HasMaxLength(100)
                .HasColumnName("fImage");
            entity.Property(e => e.FIsDelete).HasColumnName("fIs_delete");
            entity.Property(e => e.FPrice)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("fPrice");
            entity.Property(e => e.FQty).HasColumnName("fQty");
            entity.Property(e => e.FRoomtypeId).HasColumnName("fRoomtype_id");

            entity.HasOne(d => d.FHotel).WithMany(p => p.TRoomsDetails)
                .HasForeignKey(d => d.FHotelId)
                .HasConstraintName("FK_RoomsDetail_Hotels");

            entity.HasOne(d => d.FRoomtype).WithMany(p => p.TRoomsDetails)
                .HasForeignKey(d => d.FRoomtypeId)
                .HasConstraintName("FK_RoomsDetail_RoomTypes");
        });

        modelBuilder.Entity<TSourceList>(entity =>
        {
            entity.HasKey(e => e.FSourceId);

            entity.ToTable("tSourceList");

            entity.Property(e => e.FSourceId).HasColumnName("fSourceId");
            entity.Property(e => e.FSourceName)
                .HasMaxLength(50)
                .HasColumnName("fSourceName");
        });

        modelBuilder.Entity<TWalkReview>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK__tWalk_re__D9F8227CF51DCEC5");

            entity.ToTable("tWalk_Reviews");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FContent)
                .HasMaxLength(1000)
                .HasColumnName("fContent");
            entity.Property(e => e.FCreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fCreated_at");
            entity.Property(e => e.FEmployeeId).HasColumnName("fEmployee_Id");
            entity.Property(e => e.FIsDelete).HasColumnName("fIs_delete");
            entity.Property(e => e.FMemberId).HasColumnName("fMember_id");
            entity.Property(e => e.FOrderId).HasColumnName("fOrder_id");
            entity.Property(e => e.FRating).HasColumnName("fRating");
            entity.Property(e => e.FUpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("fUpdated_at");

            entity.HasOne(d => d.FMember).WithMany(p => p.TWalkReviews)
                .HasForeignKey(d => d.FMemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tWalk_Reviews_tMember");

            entity.HasOne(d => d.FOrder).WithMany(p => p.TWalkReviews)
                .HasForeignKey(d => d.FOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tWalk_Reviews_tOrders");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}